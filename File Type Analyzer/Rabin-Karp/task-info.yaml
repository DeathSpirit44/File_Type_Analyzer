type: edu
custom_name: stage5
files:
- name: src/analyzer/Main.java
  visible: true
  text: |
    package analyzer;

    import analyzer.searchStrategy.SubstringSearchMethod;

    import java.io.BufferedInputStream;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.time.Instant;
    import java.util.List;

    public class Main {
        public static void main(String[] args) {
            if (args.length < 2) {
                System.out.println("Enter 2 arguments");
                System.exit(0);
            }
            String argument ="--KMP";
            String filesPath = args[0];
            String patternsPath = args[1];
            MainTaskNEW mainTaskNEW = MainTaskNEW.MainTaskFactory(argument, filesPath, patternsPath);
            mainTaskNEW.createTasks();
            mainTaskNEW.launchTasks();
            mainTaskNEW.processResults();
        }
    }
  learner_created: false
- name: src/analyzer/searchStrategy/ConcreteSearchNaive.java
  visible: true
  text: |
    package analyzer.searchStrategy;


    import java.util.Arrays;

    class ConcreteSearchNaive extends SearchStrategy {
        private int[] prefixFunction;
        protected ConcreteSearchNaive(String pattern, String text) {
            super(pattern, text);
        }


        @Override
        protected boolean search() {
            return text.contains(pattern);
        }
    }
  learner_created: false
- name: src/analyzer/searchStrategy/SubstringSearchMethod.java
  visible: true
  text: |
    package analyzer.searchStrategy;

    public class SubstringSearchMethod {
        public static boolean searchSubstring(String argument, String pattern, String text) {
            SearchContext searchContext = SearchContext.nullFactory();
            switch (argument) {
                case "--naive" -> searchContext.setSubstringMethod(new ConcreteSearchNaive(pattern, text));
                case "--KMP" -> searchContext.setSubstringMethod(new ConcreteSearchKMP(pattern, text));
            }
            return searchContext.search();

        }

    }
  learner_created: false
- name: src/analyzer/searchStrategy/ContextStrategy.java
  visible: true
  text: |
    package analyzer.searchStrategy;


    class SearchContext {
        private SearchStrategy SearchStrategy;

        private SearchContext(SearchStrategy SearchStrategy) {
            this.SearchStrategy = SearchStrategy;
        }

        static SearchContext factory(SearchStrategy SearchStrategy) {
            return new SearchContext(SearchStrategy);
        }

        static SearchContext nullFactory() {
            return new SearchContext(null);
        }

        void setSubstringMethod(SearchStrategy SearchStrategy) {
            this.SearchStrategy = SearchStrategy;
        }

        boolean search() {
            return this.SearchStrategy.search();
        }
    }
  learner_created: false
- name: src/analyzer/searchStrategy/SearchStrategy.java
  visible: true
  text: |
    package analyzer.searchStrategy;


    abstract class SearchStrategy {
        final protected String pattern;
        final protected String text;

        protected SearchStrategy(String pattern, String text) {
            this.pattern = pattern;
            this.text = text;
        }

        protected abstract boolean search();
    }
  learner_created: false
- name: src/analyzer/searchStrategy/ConcreteSearchKMP.java
  visible: true
  text: |
    package analyzer.searchStrategy;

    import java.util.Arrays;

    class ConcreteSearchKMP extends SearchStrategy {
        int[] prefixFunction;

        protected ConcreteSearchKMP(String pattern, String text) {
            super(pattern, text);
            prefixFunction = new int[pattern.length()];

        }


        private void setPrefixFunction() {
            prefixFunction[0] = 0;
            for (int i = 1; i < pattern.length(); i++) {
                int j = prefixFunction[i - 1];
                if (pattern.charAt(j) == pattern.charAt(i)) {
                    prefixFunction[i] = prefixFunction[i - 1] + 1;
                }
                while (j != 0) {
                    j = prefixFunction[j - 1];
                    if (pattern.charAt(j) == pattern.charAt(i)) {
                        prefixFunction[i] = prefixFunction[i - 1] + 1;
                        break;
                    }
                }
            }
        }

        @Override
        protected boolean search() {
            int j = 0;
            int i = 0;
            int M = pattern.length();
            setPrefixFunction();
            while (i < text.length()) {
                if (pattern.charAt(j) == text.charAt(i)) {
                    i++;
                    j++;
                    if (j == M) {
                        return true;
                    }
                } else {
                    if (j != 0) {
                        j = this.prefixFunction[j - 1];
                    } else {
                        i = i + 1;
                    }
                }
            }
            return false;
        }
    }
  learner_created: false
- name: src/analyzer/ExtractFilesUtilsNEW.java
  visible: true
  text: |
    package analyzer;

    import java.io.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Scanner;

    /**
     * Static class for extracting various data from files
     */
    public class ExtractFilesUtilsNEW {
        /**
         * Extract the patterns and their priority from a .db file
         * @param filePath filepath of the file where the patterns are stored
         * @return return a Map of the pattern (key) and a PatternData (value)
         */
        static Map<String, PatternData> extractPatterns(String filePath) {
            File file = new File(filePath);
            Map<String, PatternData> map = new HashMap<>();
            try (Scanner scanner = new Scanner(file)) {
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    String[] values = line.split(";");
                    String[] processedValues = new String[values.length];
                    processedValues[0] = values[0].trim();
                    processedValues[1] = values[1].trim();
                    processedValues[2] = values[2].trim();
                    StringBuilder pattern = new StringBuilder(processedValues[1]);
                    StringBuilder fileType = new StringBuilder(processedValues[2]);
                    pattern.deleteCharAt(0);
                    pattern.deleteCharAt(pattern.length() - 1);
                    fileType.deleteCharAt(0);
                    fileType.deleteCharAt(fileType.length() - 1);
                    PatternData patternData = new PatternData(fileType.toString(), Integer.parseInt(processedValues[0]));
                    map.put(pattern.toString(), patternData);
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            return map;
        }

        /**
         * Convert the data of a binary file to string
         * @param filePath relative path of the binary file
         * @return the data of the file on a String
         */
        static String extractTextFromBinary(String filePath) {
            File file = new File(filePath);
            byte[] bytes;
            try (
                    FileInputStream fileInputStream = new FileInputStream(file);
                    BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream)
            ) {
                bytes = bufferedInputStream.readAllBytes();
                return new String(bytes);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }

    }

    record PatternData(String fileType, Integer priority) {
    }
  learner_created: false
- name: src/analyzer/TaskNEW.java
  visible: true
  text: |
    package analyzer;

    import analyzer.searchStrategy.SubstringSearchMethod;

    import java.util.Map;
    import java.util.concurrent.Callable;

    record TaskResult(String pattern, boolean found, Map<String, PatternData> map) implements Comparable<TaskResult> {
        @Override
        public int compareTo(TaskResult o) {
            return map.get(this.pattern).priority().compareTo(map.get(o.pattern).priority());
        }
    }

    /**
     * Task to be run in a separate thread
     */
    public class TaskNEW implements Callable<TaskResult> {
        private final String parameter;
        private final String pattern;
        private final String filePath;
        private final Map<String, PatternData> map;

        public TaskNEW(String parameter, String pattern, String filePath, Map<String, PatternData> map) {
            this.parameter = parameter;
            this.pattern = pattern;
            this.filePath = filePath;
            this.map = map;
        }

        public String getParameter() {
            return parameter;
        }

        public String getPattern() {
            return pattern;
        }

        public String getFilePath() {
            return filePath;
        }

        @Override
        public TaskResult call() {
            return new TaskResult(pattern, SubstringSearchMethod.searchSubstring(parameter, pattern, ExtractFilesUtilsNEW.extractTextFromBinary(filePath)), this.map);
        }
    }
  learner_created: false
- name: src/analyzer/MainTaskNEW.java
  visible: true
  text: |
    package analyzer;

    import java.io.File;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.List;
    import java.util.Map;
    import java.util.concurrent.*;

    public class MainTaskNEW {
        final private File[] filesList;
        final private Map<String, PatternData> patternsMap;
        final private String parameter;
        private final List<List<TaskResult>> resultList = new ArrayList<>();
        private final List<List<TaskNEW>> listOfTasks = new ArrayList<>(); //[file][pattern]

        private MainTaskNEW(File[] filesList, Map<String, PatternData> patternsMap, String parameter) {
            this.filesList = filesList;
            this.patternsMap = patternsMap;
            this.parameter = parameter;
        }

        public static MainTaskNEW MainTaskFactory(String parameter, String dirPath, String patternPath) {
            return new MainTaskNEW(new File(dirPath).listFiles(), ExtractFilesUtilsNEW.extractPatterns(patternPath), parameter);
        }

        public void createTasks() {
            for (var file :
                    filesList) {
                List<TaskNEW> fileTasks = new ArrayList<>();
                patternsMap.forEach((key, value) -> {
                    fileTasks.add(new TaskNEW(parameter, key, file.getPath(), patternsMap));
                });
                listOfTasks.add(fileTasks);
            }
        }

        public void launchTasks() {
            ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
            List<List<Future<TaskResult>>> futureList = new ArrayList<>();
            listOfTasks.forEach((task) -> {
                try {
                    futureList.add(executorService.invokeAll(task));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            });
            for (var list :
                    futureList) {
                List<TaskResult> filesResults = new ArrayList<>();
                list.forEach((future) -> {
                    try {
                        TaskResult futur = future.get();
                        if (futur.found()) {
                            filesResults.add(futur);
                        }
                    } catch (InterruptedException | ExecutionException e) {
                        throw new RuntimeException(e);
                    }
                });
                resultList.add(filesResults);
            }
            executorService.shutdown();
            try {
                if (!executorService.awaitTermination(1, TimeUnit.SECONDS)) {
                    executorService.shutdownNow();
                }
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

        public void processResults() throws RuntimeException {
            ExecutorService executorService = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
            List<String> finalResults = new ArrayList<>();
            for (int i = 0; i < resultList.size(); i++) {
                StringBuilder filename = new StringBuilder(listOfTasks.get(i).get(0).getFilePath());
                filename.delete(0, filename.indexOf("/") + 1);
                if (resultList.get(i).isEmpty()) {
                    System.out.println(filename + ": " + "Unknown file type");
                } else {
                    System.out.println(filename + ": " + patternsMap.get(Collections.max(resultList.get(i)).pattern()).fileType());
                }


            }
        }
    }
  learner_created: false
- name: test/MainTest.java
  visible: false
  text: |2

    import analyzer.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.junit.AfterClass;
    import org.junit.Assert;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.lang.management.ManagementFactory;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;

    public class MainTest extends StageTest<Clue> {
        private static final String CURRENT_DIR = System.getProperty("user.dir") + File.separator;

        private static String testFolder = "test_files";
        private static String files = testFolder + File.separator;

        private static String patternsDb = "patterns.db";
        private static final String patterns =
            "1;\"%PDF-\";\"PDF document\"\n" +
                "2;\"pmview\";\"PCP pmview config\"\n" +
                "4;\"PK\";\"Zip archive\"\n" +
                "5;\"vnd.oasis.opendocument.presentation\";\"OpenDocument presentation\"\n" +
                "6;\"W.o.r.d\";\"MS Office Word 2003\"\n" +
                "6;\"P.o.w.e.r.P.o.i\";\"MS Office PowerPoint 2003\"\n" +
                "7;\"word/_rels\";\"MS Office Word 2007+\"\n" +
                "7;\"ppt/_rels\";\"MS Office PowerPoint 2007+\"\n" +
                "7;\"xl/_rels\";\"MS Office Excel 2007+\"\n" +
                "8;\"-----BEGIN\\ CERTIFICATE-----\";\"PEM certificate\"\n" +
                "9;\"ftypjp2\";\"ISO Media JPEG 2000\"\n" +
                "9;\"ftypiso2\";\"ISO Media MP4 Base Media v2\"\n";

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                //Testing basic cases
                //PDF
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "doc.pdf", "PFDF%PDF-PDF")
                    .addFile(files + "text.pdf", "PFPDF-PDFABC")
                    .setAttach(new Clue(
                        "doc.pdf: PDF document",
                        "text.pdf: Unknown file type",
                        "Wrong answer for files with PDF documents")),

                //Zip archive
                new TestCase<Clue>()
                    .addArguments(new String[] {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "doc.zip", "PCK")
                    .addFile(files + "doc1.zip", "PKC")
                    .setAttach(new Clue(
                        "doc.zip: Unknown file type" ,
                        "doc1.zip: Zip archive",
                        "Wrong answer for files with Zip archives")),

                //PCP pmview config
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "main", "pmview")
                    .addFile(files + "main.config", "pmconfigview")
                    .setAttach(new Clue(
                        "main: PCP pmview config",
                        "main.config: Unknown file type",
                        "Wrong answer for PCP pmview config files")),

                //OpenDocument presentation
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "slides1.odp", "vnd.oasis.opendocument.presentation")
                    .addFile(files + "slides2.odp", "vnd.oasis.microsoft.presentation")
                    .setAttach(new Clue(
                        "slides1.odp: OpenDocument presentation",
                        "slides2.odp: Unknown file type",
                        "")),

                //MS Office Word 2003
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "txt.doc", "wwwwwwwwW.o.r.d")
                    .addFile(files + "doc.txt", "W.o.r.kwwwwwwww")
                    .setAttach(new Clue(
                        "doc.txt: Unknown file type",
                        "txt.doc: MS Office Word 2003",
                        "Wrong answer for Word 2003 files")),

                //MS Office PowerPoint 2003
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "slides1.ptp", "P.o.w.e.r.P.o.i")
                    .addFile(files + "slides2.ptp", "P.o.w.e.r.\\Sh.o.i")
                    .setAttach(new Clue(
                        "slides1.ptp: MS Office PowerPoint 2003",
                        "slides2.ptp: Unknown file type",
                        "")),

                //MS Office Word 2007+
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "txt.doc", "\\word/_rels")
                    .addFile(files + "doc.txt", "word/\\_rels")
                    .setAttach(new Clue(
                        "doc.txt: Unknown file type",
                        "txt.doc: MS Office Word 2007+",
                        "Wrong answer for Word 2007+ files")),

                //MS Office PowerPoint 2007+
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "pres1.pptx", "afeefa%ppt/_relsasdad")
                    .addFile(files + "pres2.pptx", "ppasfsfafdaet/_rels")
                    .setAttach(new Clue(
                        "pres1.pptx: MS Office PowerPoint 2007+",
                        "pres2.pptx: Unknown file type",
                        "")),

                //MS Office Excel 2007+
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "sheet1.xls", "asdaxl/_rels")
                    .addFile(files + "sheet2.xls", "x2/_reasdadls")
                    .setAttach(new Clue(
                        "sheet1.xls: MS Office Excel 2007+",
                        "sheet2.xls: Unknown file type",
                        "Wrong answer for Excel 2007+ files")),

                //PEM certificate
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "cert.pem", "\\\\\\\\\\aasdw-----BEGIN\\ CERTIFICATE-----")
                    .addFile(files + "cert_core.pem", "\\\\\\\\\\adww-----BEGIN\\CERTIFICATE-----")
                    .setAttach(new Clue(
                        "cert.pem: PEM certificate",
                        "cert_core.pem: Unknown file type",
                        "")),

                //ISO Media JPEG 2000
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "1.jpg", "ftypjp2ddddddaa")
                    .addFile(files + "2.jpg", "ftypdddjp2dadad")
                    .setAttach(new Clue(
                        "1.jpg: ISO Media JPEG 2000",
                        "2.jpg: Unknown file type",
                        "Wrong answer for ISO Media JPEG 2000 files")),

                //ISO Media MP4 Base Media v2
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "tape.jpg", "ftypiso2mp4")
                    .addFile(files + "tape.mp4", "mp4ffttypiso2")
                    .setAttach(new Clue(
                        "tape.jpg: ISO Media MP4 Base Media v2",
                        "tape.mp4: Unknown file type",
                        "")),

                //Testing patterns priority
                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "tape2.jpg", "PK W.o.r.d")
                    .addFile(files + "tape2.mp4", "%PDF-mp4fftypiso2")
                    .setAttach(new Clue(
                        "tape2.jpg: MS Office Word 2003",
                        "tape2.mp4: ISO Media MP4 Base Media v2",
                        "Wrong answer white testing priority")),

                new TestCase<Clue>()
                    .addArguments(new String[]
                        {testFolder, patternsDb})
                    .addFile(patternsDb, patterns)
                    .addFile(files + "tape3.jpg", "-----BEGIN\\ CERTIFICATE-----pmview")
                    .addFile(files + "tape3.mp4", "%PDF-ftypppfW.o.r.dftypiso")
                    .setAttach(new Clue(
                        "tape3.jpg: PEM certificate",
                        "tape3.mp4: MS Office Word 2003",
                        ""))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {
            String actual = reply.strip();

            if (!actual.contains(clue.first)) {
                return CheckResult.wrong(
                    clue.feedback + "\n\n" +
                        "Cannot find a line " + clue.first + "\nYour output:\n" + actual
                );
            }

            if (!actual.contains(clue.second)) {
                return CheckResult.wrong(
                    clue.feedback + "\n\n" +
                        "Cannot find a line " + clue.second + "\nYour output:\n" + actual
                );
            }

            return CheckResult.correct();
        }

        @BeforeClass
        public static void generateTestFilesDirectory() {

            deleteTestFilesDirectory();

            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + testFolder));
            }
            catch (IOException ex) {

            }
            try {
                Files.createDirectory(Paths.get(CURRENT_DIR + testFolder));
            }
            catch (IOException ex) {

            }
        }


        @AfterClass
        public static void deleteTestFilesDirectory() {
            try {
                Files.deleteIfExists(Paths.get(CURRENT_DIR + testFolder));
            }
            catch (IOException ex) {


            }
        }

    }
  learner_created: false
- name: test/Clue.java
  visible: false
  text: |2

    public class Clue {
        public String first;
        public String second;
        public String feedback;

        public Clue(String first, String second, String feedback) {
            this.first = first;
            this.second = second;
            this.feedback = feedback;
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5489#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 09 Sep 2022 19:58:47 UTC
record: -1
